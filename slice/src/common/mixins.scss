@mixin xs-only() {@media (max-width: $bp-small - 1) {@content;}}
@mixin sm-only() {@media (min-width: $bp-small) and (max-width: $bp-middle - 1){@content;}}
@mixin md-only() {@media (min-width: $bp-middle) and (max-width: $bp-large - 1){@content;}}
@mixin xl-only() {@media (min-width: $bp-large) and (max-width: $bp-xl - 1){@content;}}

@mixin sm() {@media (min-width: $bp-small) {@content;}}
@mixin md() {@media (min-width: $bp-middle) {@content;}}
@mixin lg() {@media (min-width: $bp-large) {@content;}}
@mixin xl() {@media (min-width: $bp-xl) {@content;}}
@mixin xxl() {@media (min-width: $bp-xxl) {@content;}}

@mixin sm-down() {@media (max-width: $bp-small - 1) {@content;}}
@mixin md-down() {@media (max-width: $bp-middle - 1) {@content;}}
@mixin lg-down() {@media (max-width: $bp-large - 1) {@content;}}
@mixin xl-down() {@media (max-width: $bp-xl - 1) {@content;}}

@mixin mq-up($mq) {@media (min-width: $mq) {@content;}}
@mixin mq-down($mq) {@media (max-width: $mq - 1) {@content;}}

@mixin media-prop-final($xs,$sm,$md,$lg,$xl,$xxl,$prop) {
  @if $xs {@each $property in $prop {#{$property}: $xs;}}
  @if $sm {@include sm {@each $property in $prop {#{$property}: $sm;}}}
  @if $md {@include md {@each $property in $prop {#{$property}: $md;}}}
  @if $lg {@include lg {@each $property in $prop {#{$property}: $lg;}}}
  @if $xl {@include xl {@each $property in $prop {#{$property}: $xl;}}}
  @if $xxl {@include xxl {@each $property in $prop {#{$property}: $xxl;}}}
}

@mixin media-prop($media-arg, $prop) {
  $media-val: ("xs":false, "sm": false, "md": false, "lg": false, "xl": false, "xxl": false);

  @each $name, $value in keywords($media-arg) {
    @if $name == xs {$media-val: map-merge($media-val, ("xs": $value))}
    @if $name == sm {$media-val: map-merge($media-val, ("sm": $value))}
    @if $name == md {$media-val: map-merge($media-val, ("md": $value))}
    @if $name == lg {$media-val: map-merge($media-val, ("lg": $value))}
    @if $name == xl {$media-val: map-merge($media-val, ("xl": $value))}
    @if $name == xxl {$media-val: map-merge($media-val, ("xxl": $value))}
  }

  @for $i from 0 to length($media-arg) {
    $val: #{nth($media-arg, $i + 1) };
    @if map-get($media-val, "xs") == false {$media-val: map-merge($media-val, ("xs": $val))}
    @else if map-get($media-val, "sm") == false {$media-val: map-merge($media-val, ("sm": $val))}
    @else if map-get($media-val, "md") == false {$media-val: map-merge($media-val, ("md": $val))}
    @else if map-get($media-val, "lg") == false {$media-val: map-merge($media-val, ("lg": $val))}
    @else if map-get($media-val, "xl") == false {$media-val: map-merge($media-val, ("xl": $val))}
    @else if map-get($media-val, "xxl") == false {$media-val: map-merge($media-val, ("xxl": $val))}
  }

  @include media-prop-final(map-get($media-val, "xs"), map-get($media-val, "sm"),map-get($media-val, "md"),map-get($media-val, "lg"),map-get($media-val, "xl"),map-get($media-val, "xxl"),$prop);
}

@mixin adaptive($prop, $media-arg...) {
  @include media-prop($media-arg,$prop);
}

@mixin font-size($media-arg...) {$prop: font-size; @include media-prop($media-arg,$prop);}

@mixin margin($media-arg...) {$prop: margin; @include media-prop($media-arg,$prop);}
@mixin margin-top($media-arg...) {$prop: margin-top; @include media-prop($media-arg,$prop);}
@mixin margin-left($media-arg...) {$prop: margin-left; @include media-prop($media-arg,$prop);}
@mixin margin-right($media-arg...) {$prop: margin-right; @include media-prop($media-arg,$prop);}
@mixin margin-bottom($media-arg...) {$prop: margin-bottom; @include media-prop($media-arg,$prop);}

@mixin display($media-arg...) {$prop: display; @include media-prop($media-arg,$prop);}
@mixin padding($media-arg...) {$prop: padding; @include media-prop($media-arg,$prop);}
@mixin padding-left($media-arg...) {$prop: padding-left; @include media-prop($media-arg,$prop);}
@mixin padding-right($media-arg...) {$prop: padding-right; @include media-prop($media-arg,$prop);}
@mixin padding-top($media-arg...) {$prop: padding-top; @include media-prop($media-arg,$prop);}
@mixin padding-bottom($media-arg...) {$prop: padding-bottom; @include media-prop($media-arg,$prop);}

@mixin width($media-arg...) {$prop: width; @include media-prop($media-arg,$prop);}
@mixin min-width($media-arg...) {$prop: min-width; @include media-prop($media-arg,$prop);}
@mixin max-width($media-arg...) {$prop: max-width; @include media-prop($media-arg,$prop);}
@mixin height($media-arg...) {$prop: height; @include media-prop($media-arg,$prop);}
@mixin min-height($media-arg...) {$prop: min-height; @include media-prop($media-arg,$prop);}
@mixin max-height($media-arg...) {$prop: max-height; @include media-prop($media-arg,$prop);}
@mixin top($media-arg...) {$prop: top; @include media-prop($media-arg,$prop);}
@mixin left($media-arg...) {$prop: left; @include media-prop($media-arg,$prop);}
@mixin right($media-arg...) {$prop: right; @include media-prop($media-arg,$prop);}
@mixin bottom($media-arg...) {$prop: bottom; @include media-prop($media-arg,$prop);}
@mixin letter-spacing($media-arg...) {$prop: letter-spacing; @include media-prop($media-arg,$prop);}

@mixin object-fit($fit: fill, $position: null){
  object-fit: $fit;
  @if $position {
    object-position: $position;
    font-family: 'object-fit: #{$fit}; object-position: #{$position}';
  } @else {
    font-family: 'object-fit: #{$fit}';
  }
}

@mixin cr-last-item() {
  &:last-child {
    margin-bottom: 0;
  }
}

@mixin cr-last-child() {
  & > *:last-child {
    margin-bottom: 0;
  }
}

@mixin stretch-block($top: 0,$left: 0,$right: 0, $bottom:0, $width: 100%, $height: 100%) {
  position: absolute;
  width: $width;
  height: $height;
  top: $top;
  left: $left;
  right: $right;
  bottom: $bottom;
}

@mixin fluid-block() {
  position: relative;
  width: 100vw;
  left: 50%;
  transform: translate(-50%, 0);
}

@mixin fluid-block-alt() {
  position: relative;
  left: calc(50% - 50vw);
  width: 100vw;
}

@mixin flex-col($cols: 2, $gap: 0, $mb: 0) {
  margin-left: #{$gap/2};
  margin-right: #{$gap/2};
  margin-top: $mb;

  @if $gap == 0 {
    width: calc(100% / #{$cols});
  } @else {
    width: calc(100% / #{$cols} - #{$gap});
  }
}

@mixin flex-block($cols: 2, $gap: 0, $mb: false, $mob-bottom: false, $mob-w: false) {
  @if $mb == false {$mb: $gap}

  @include sm {
    display: flex;
    margin-top: -#{$mb};
    margin-left: -#{$gap/2};
    margin-right: -#{$gap/2};
  }

  & > * {

    @include xs-only {
      @if $mob-w {
        max-width: $mob-w;
      }
      @if $mob-bottom {
        margin: 0 auto $mob-bottom;
        @include cr-last-item;
      }
    }

    @include sm {
      @include flex-col($gap: $gap, $mb: $mb, $cols: $cols);
    }
  }
}

@mixin text-hide($type: default) {
  text-indent: -9999px;
  font-size: 0;
  line-height: 0;
}

@mixin clear-box {
  clear: both;
  overflow: hidden;
}

@mixin pseudo-block($top: false, $right: false, $bottom: false, $left: false, $position: absolute, $content: '') {
  content: $content;
  position: $position;

  @if ($top) {
    top: $top;
  }
  @if ($right) {
    right: $right;
  }
  @if ($bottom) {
    bottom: $bottom;
  }
  @if ($left) {
    left: $left;
  }
}

@mixin clearfix {

  &:after {
    content: '';
    display: table;
    clear: both;
  }
}

@mixin input-placeholder($color, $opacity: 1) {
  &::-webkit-input-placeholder {
    color: $color;
    opacity: $opacity;
  }

  &:-moz-placeholder {
    color: $color;
    opacity: $opacity;
  }

  &::-moz-placeholder {
    color: $color;
    opacity: $opacity;
  }

  &:-ms-input-placeholder {
    color: $color;
    opacity: $opacity;
  }
}


//@mixin btn($font: $Gotham-Medium, $fontSize: 14px, $radius: 40px, $padding: 10px 22px) {
//  border-radius: $radius;
//  padding: $padding;
//  font: $fontSize $font;
//  line-height: 1.2;
//  text-decoration: none !important;
//  display: inline-block;
//  transition: background-color .3s, border-color .3s;
//  cursor: pointer;
//  outline: none !important;
//}
//@mixin btnStyle(
//  $bg: $color-yellow,
//  $stroke: $color-yellow,
//  $color: #fff,
//  $hover-color: false,
//  $hover-bg: false,
//  $hover-stroke: false
//) {
//  background: $bg;
//  border: 2px solid $stroke;
//  color: $color;
//
//  &:hover, &:active, &_hover, &_active {
//    @if ($hover-bg) {
//      background: $hover-bg;
//    } @else {
//      background: darken($bg, 5%);
//    }
//
//    @if ($hover-stroke) {
//      border-color: $hover-stroke;
//    } @else {
//      border-color: darken($stroke, 5%);
//    }
//
//    @if ($hover-color) { color: $hover-color; }
//  }
//}