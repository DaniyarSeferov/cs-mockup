<?php

/**
 * @file
 * Functions to support theming in the csf theme.
 */

use Drupal\block_content\Entity\BlockContent;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Link;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\node\Entity\NodeType;
use Drupal\image\Entity\ImageStyle;
use Drupal\block\Entity\Block;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Xss;


/**
 * Implements hook_preprocess_html().
 */
function csf_preprocess_html(array &$vars) {
  $node = \Drupal::request()->attributes->get('node');
  $view_id = \Drupal::routeMatch()->getParameter('view_id');

  if (!empty($view_id)) {
    switch ($view_id) {
      case 'news':
        $vars['attributes']['class'][] = 'page-news-archive';
        $vars['attributes']['class'][] = 'with-sidebar';
        break;
    }
  }

  if ($node && is_object($node)) {
    switch ($node->bundle()) {
      case 'news':
        $vars['attributes']['class'][] = 'with-sidebar';
        break;
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function csf_preprocess_page(array &$vars) {
  $view_id = \Drupal::routeMatch()->getParameter('view_id');
  $node = !empty($vars["node"]) ? $vars["node"] : '';

  if (!empty($view_id)) {
    switch ($view_id) {
      case 'news':
        $vars['content_class'] = 'news';
        break;
    }
  }

  if (!empty($node) && is_object($node)) {
    switch ($node->bundle()) {
      case 'news':
        $vars['content_class'] = 'news';
        break;
    }
  }

  $vars['social'] = [
    '#theme' => 'csf_custom_social',
  ];
}

/**
 * Implements hook_preprocess_node().
 */
function csf_preprocess_node(array &$vars) {
  $node = $vars['node'];
  $view_mode = !empty($vars["view_mode"]) ? $vars["view_mode"] : '';

  switch ($node->bundle()) {
    case 'video':
      $video = !empty($vars["content"]["field_video_youtube"]) &&
      !empty($vars["content"]["field_video_youtube"]["#items"]) ?
        $vars["content"]["field_video_youtube"]['#items']->first()
          ->get('entity')
          ->getValue() : '';
      if ($video->hasField('field_media_oembed_video')) {
        $video = $video->get('field_media_oembed_video');
        $video = $video->getValue();
        if (!empty($video) && !empty($video[0])) {
          $video_id = _csf_get_youtube_id_from_url($video[0]["value"]);
          if (!empty($video_id)) {
            $vars["video_url"] = 'https://www.youtube.com/embed/' . $video_id;
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_preprocess_field().
 */
function csf_preprocess_field(array &$vars) {
  $view_mode = !empty($vars["element"]["#view_mode"]) ? $vars["element"]["#view_mode"] : '';
  $disable_quick_edit_field_types = [
    'image',
    'link',
    'field_collection',
    'entity_reference_revisions',
  ];

  if (in_array($vars['field_type'], $disable_quick_edit_field_types)) {
    if (isset($vars['attributes']['data-quickedit-field-id'])) {
      unset($vars['attributes']['data-quickedit-field-id']);
    }
  }

  $is_image_entity = ($vars['field_type'] == 'entity_reference') && !empty($vars["items"][0]["content"]["#theme"]) &&
    ($vars["items"][0]["content"]["#theme"] == 'image_formatter');

  if (($vars['field_type'] == 'image') || $is_image_entity) {
    if (!empty($vars['items'][0]['content']['#item']->entity)) {
      if (!empty($vars["items"][0]["content"]["#image_style"])) {
        $style = $vars["items"][0]["content"]["#image_style"];
        $img_file_uri = $vars['items'][0]['content']['#item']->entity->getFileUri();
        $vars['image_url'] = ImageStyle::load($style)->buildUrl($img_file_uri);
      }
      else {
        //        $vars['image_url'] = $vars['items'][0]['content']['#item']->entity->url();
      }
    }
  }

  switch ($vars['element']['#field_name']) {
    case 'field_slide_desc':
    case 'field_slide_link':
      _csf_hide_quick_edit($vars);
      break;
  }
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function csf_theme_suggestions_field_alter(array &$suggests, array $vars) {
  $element = $vars['element'];

  switch ($element['#field_name']) {
    case 'field_logo_logo':
      $suggests[] = 'field__no_wrappers';
      break;
  }
}

/**
 * Implements hook_preprocess_views_view();
 */
function csf_preprocess_views_view(&$vars) {
  $view = $vars['view'];
  $id = $view->id();
  $display_id = $view->current_display;

  switch ($id) {
    case 'home_news':
      $options = ['class' => ['btn']];
      $url = Url::fromUri('internal:/news');
      $url->setOption('attributes', $options);
      $vars['all_news'] = Link::fromTextAndUrl(t('Все новости'), $url);
      break;
  }
}

/**
 * Implements hook_preprocess_block().
 */
function csf_preprocess_block(array &$vars) {
  $block = !empty($vars["content"]["#block_content"]) ?
    $vars["content"]["#block_content"] : '';
  $bundle = !empty($block) ? $block->bundle() : '';

  switch ($bundle) {
    case 'promo_code':

      break;
  }

  switch ($vars['elements']['#id']) {
    case 'csf_main_menu':
    case 'mainnavigation':
      $vars['content']['#attributes']['block'] = $vars['elements']['#id'];
      break;
    case 'newsarchive':
      $archive = _csf_get_news_archive();
      $base_path = Url::fromUserInput('/news')->toString();
      $current_path = \Drupal::service('path.current')->getPath();

      $vars['content'] = [
        '#theme' => 'csf_news_sidebar',
        '#archive' => $archive,
        '#current_path' => $current_path,
        '#base_path' => $base_path,
      ];
      break;
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function csf_theme_suggestions_block_alter(array &$suggestions, array $vars) {

  if (!empty($vars['elements']['content']) && !empty($vars['elements']['content']['#block_content'])) {
    $bundle = $vars['elements']['content']['#block_content']->bundle();

    $suggestions[] = 'block__' . $bundle;
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function csf_preprocess_paragraph(array &$vars) {
  $paragraph = $vars["elements"]["#paragraph"];

  switch ($paragraph->bundle()) {
    case 'sponsors':
      $link = !empty($vars["content"]["field_sponsors_url"]) &&
      !empty($vars["content"]["field_sponsors_url"][0]) ?
        $vars["content"]["field_sponsors_url"][0]["#url"] : '';
      $vars['link'] = !empty($link) ? $link->toString() : '#';
      break;
    case 'gallery_images':
      $is_big = !empty($vars["content"]["field_gallery_images_x2"]) &&
      !empty($vars["content"]["field_gallery_images_x2"][0]) ?
        $vars["content"]["field_gallery_images_x2"]['#items']->getValue() : '';
      $vars['is_big'] = !empty($is_big) && !empty($is_big[0]) ? $is_big[0]["value"] : '';
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function csf_form_alter(&$form, &$form_state, $form_id) {

  switch ($form_id) {
    case 'views_exposed_form':

      break;
  }
}

/**
 * Helper function hide quick edit attributes in render array.
 *
 * @param $vars
 */
function _csf_hide_quick_edit(&$vars) {
  if (!empty($vars['attributes']['data-quickedit-field-id'])) {
    unset($vars['attributes']['data-quickedit-field-id']);
  }
}

function csf_preprocess(&$vars, $hook) {
  $vars['theme_path'] = base_path() . drupal_get_path('theme', 'csf');
}

/**
 * Get block.
 */
function _csf_get_block($bid) {
  $render = '';
  $block = \Drupal\block\Entity\Block::load($bid);

  if (!empty($block)) {
    $render = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($block);
  }

  return $render;
}

/**
 * Get Youtube id.
 *
 * @param $url
 *
 * @return mixed|string
 */
function _csf_get_youtube_id_from_url($url) {
  preg_match('/(http(s|):|)\/\/(www\.|)yout(.*?)\/(embed\/|watch.*?v=|)([a-z_A-Z0-9\-]{11})/i', $url, $results);
  return !empty($results[6]) ? $results[6] : '';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function csf_theme_suggestions_menu_alter(array &$suggestions, array $vars) {
  if (!empty($vars['attributes']) && !empty($vars['attributes']['block'])) {
    $hook = str_replace(['block-', '-'], [
      '',
      '_',
    ], $vars['attributes']['block']);
    $block = \Drupal\block\Entity\Block::load($hook);
    $region = !empty($block) && is_object($block) ? $block->getRegion() : '';
    $suggestions[] = $vars['theme_hook_original'] . '__' . $region . '__' . $hook;
  }
}


/**
 * Implements hook_theme().
 */
function csf_theme($existing, $type, $theme, $path) {
  $theme_path = base_path() . drupal_get_path('theme', 'csf');
  return [
    'csf_news_sidebar' => [
      'variables' => [
        'archive' => NULL,
        'current_path' => NULL,
        'base_path' => NULL,
      ],
      'path' => $theme_path . '/templates/theme',
    ],
  ];
}

function _csf_get_news_archive() {
  $query = \Drupal::database()->select('node_field_data', 'nfd')
    ->condition('nfd.type', 'news')
    ->condition('nfd.status', 1);
  $query->innerJoin('node__field_news_date', 'rd', 'rd.entity_id = nfd.nid AND rd.deleted = 0 AND rd.bundle = \'news\'');

  $query->addExpression("DATE_FORMAT(field_news_date_value, '%M')", 'month');
  $query->addExpression("DATE_FORMAT(field_news_date_value, '%m')", 'month_digits');
  $query->addExpression("DATE_FORMAT(field_news_date_value, '%Y')", 'year');

  $query->groupBy('year');
  $query->groupBy('month_digits');
  $query->groupBy('month');
  $query->orderBy('year', 'desc');
  $query->orderBy('month_digits', 'desc');

  $result = $query->execute()->fetchAll();
  //  $a = $query->__toString();

  $archive = [];
  $month_map = _csf_month_map();
  foreach ($result as $row) {
    $month = !empty($month_map[$row->month]) ? $month_map[$row->month]->__toString() : $row->month;
    $archive[$row->year][$month] = $row;
  }

  return !empty($archive) ? $archive : [];
}

function _csf_month_map() {
  return [
    'January' => t('Январь'),
    'February' => t('Февраль'),
    'March' => t('Март'),
    'April' => t('Апрель'),
    'May' => t('Май'),
    'June' => t('Июнь'),
    'July' => t('Июль'),
    'August' => t('Август'),
    'September' => t('Сентябрь'),
    'October' => t('Октябрь'),
    'November' => t('Ноябрь'),
    'December' => t('Декабрь'),
    ];
}
